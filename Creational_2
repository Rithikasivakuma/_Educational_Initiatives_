// House.java
public class House {
    private final int windows;
    private final int doors;
    private final boolean hasGarage;
    private final boolean hasSwimmingPool;
    private final String roofType;

    private House(HouseBuilder builder) {
        this.windows = builder.windows;
        this.doors = builder.doors;
        this.hasGarage = builder.hasGarage;
        this.hasSwimmingPool = builder.hasSwimmingPool;
        this.roofType = builder.roofType;
    }

    @Override
    public String toString() {
        return String.format("House [windows=%d, doors=%d, garage=%b, swimmingPool=%b, roofType=%s]", 
                             windows, doors, hasGarage, hasSwimmingPool, roofType);
    }

    // Builder class
    public static class HouseBuilder {
        private int windows;
        private int doors;
        private boolean hasGarage;
        private boolean hasSwimmingPool;
        private String roofType;

        public HouseBuilder setWindows(int windows) {
            if (windows < 0) throw new IllegalArgumentException("Windows cannot be negative");
            this.windows = windows;
            return this;
        }

        public HouseBuilder setDoors(int doors) {
            if (doors < 0) throw new IllegalArgumentException("Doors cannot be negative");
            this.doors = doors;
            return this;
        }

        public HouseBuilder setGarage(boolean hasGarage) {
            this.hasGarage = hasGarage;
            return this;
        }

        public HouseBuilder setSwimmingPool(boolean hasSwimmingPool) {
            this.hasSwimmingPool = hasSwimmingPool;
            return this;
        }

        public HouseBuilder setRoofType(String roofType) {
            if (roofType == null || roofType.isBlank()) {
                throw new IllegalArgumentException("Roof type cannot be empty");
            }
            this.roofType = roofType;
            return this;
        }

        public House build() {
            // some validation
            if (roofType == null || roofType.isBlank()) {
                throw new IllegalStateException("Roof type must be specified");
            }
            return new House(this);
        }
    }
}
